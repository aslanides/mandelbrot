{"version":3,"sources":["draw.ts","view.ts","main.ts"],"names":[],"mappings":"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","file":"main.392215b3.js","sourceRoot":"../src","sourcesContent":["/* Functions for drawing on the canvas. */\n\nimport { View } from './view';\n\nexport function drawHistogram(\n  ctx: CanvasRenderingContext2D,\n  view: View,\n  escapeTimes: Uint32Array,\n  maxIterations: number\n) {\n  // Reset canvas.\n  const width = view.width;\n  const height = view.height;\n  const i = view.i;\n  const j = view.j;\n\n  console.assert(escapeTimes.length === width * height, 'Bad width/height.');\n\n  ctx.fillRect(i, j, width, height);\n  // Get image data.\n  const numColors = 255 ** 3;\n  const imageData = ctx.getImageData(i, j, width, height);\n  const histogram = new Float32Array(maxIterations);\n\n  let totalIterations = 0;\n  for (let i = 0; i < width * height; i++) {\n    const time = escapeTimes[i];\n    histogram[time]++;\n    totalIterations++;\n  }\n\n  for (let i = 0; i < width * height; i++) {\n    const time = escapeTimes[i];\n    let color = Math.floor((histogram[time] * numColors) / totalIterations);\n    for (let channel = 0; channel < 3; channel++) {\n      imageData.data[4 * i + channel] = color % 255;\n      color /= 255;\n    }\n  }\n\n  ctx.putImageData(imageData, i, j);\n}\n\nexport function draw(\n  ctx: CanvasRenderingContext2D,\n  view: View,\n  escapeTimes: Uint32Array,\n  maxIterations: number\n) {\n  // Reset canvas.\n  const width = view.width;\n  const height = view.height;\n  const i = view.i;\n  const j = view.j;\n\n  console.assert(escapeTimes.length === width * height, 'Bad width/height.');\n\n  ctx.fillRect(i, j, width, height);\n  // Get image data.\n  const numColors = 255 ** 3;\n  const imageData = ctx.getImageData(i, j, width, height);\n\n  for (let i = 0; i < width * height; i++) {\n    const time = escapeTimes[i];\n    let color = Math.floor((time / maxIterations) * numColors);\n    for (let channel = 0; channel < 3; channel++) {\n      imageData.data[4 * i + channel] = color % 255;\n      color /= 255;\n    }\n  }\n\n  ctx.putImageData(imageData, i, j);\n  ctx.fillStyle = 'white';\n  ctx.fillText(\n    'left click to zoom in. right click to zoom out. b to undo. r to reset.',\n    10,\n    10\n  );\n}\n","/* Functions for manipulating the user's view. */\n\nexport interface View {\n  // Coordinate system.\n  xCenter: number;\n  yCenter: number;\n  xRange: number;\n  yRange: number;\n\n  // Pixels.\n  i: number;\n  j: number;\n  width: number;\n  height: number;\n\n  // Metadata for Mandelbrot.\n  maxIterations: number;\n}\n\nexport function zoom(event: MouseEvent, view: View, zoomFactor = 2): View {\n  /* Zooms the view given a user click. */\n\n  // Get the top left corner of the current view.\n  const xMin = view.xCenter - view.xRange / 2;\n  const yMin = view.yCenter - view.yRange / 2;\n\n  // Get the new view center.\n  view.xCenter = xMin + (view.xRange * event.layerX) / view.width;\n  view.yCenter = yMin + (view.yRange * event.layerY) / view.height;\n  console.log(`Centered on ${view.xCenter} + ${view.yCenter}i.`);\n\n  // Zoom.\n  view.xRange /= zoomFactor;\n  view.yRange /= zoomFactor;\n\n  return view;\n}\n\nexport function reset(\n  width: number,\n  height: number,\n  maxIterations: number\n): View {\n  /* Resets to the 'default' view of the Mandelbrot set. */\n\n  return {\n    xCenter: -0.75,\n    yCenter: 0,\n    xRange: 3.5,\n    yRange: 2,\n    i: 0,\n    j: 0,\n    width,\n    height,\n    maxIterations,\n  };\n}\n\nexport function split(view: View, numWorkers: number): View[] {\n  const sqrtNumWorkers = Math.sqrt(numWorkers);\n  console.assert(sqrtNumWorkers === Math.floor(sqrtNumWorkers));\n  console.assert(view.i === 0);\n  console.assert(view.j === 0);\n\n  const views = new Array<View>();\n  const xMin = view.xCenter - view.xRange / 2;\n  const yMin = view.yCenter - view.yRange / 2;\n  for (let i = 0; i < sqrtNumWorkers; i++) {\n    for (let j = 0; j < sqrtNumWorkers; j++) {\n      const subView = {\n        i: (i * view.width) / sqrtNumWorkers,\n        j: (j * view.height) / sqrtNumWorkers,\n        height: view.height / sqrtNumWorkers,\n        width: view.width / sqrtNumWorkers,\n\n        xRange: view.xRange / sqrtNumWorkers,\n        yRange: view.yRange / sqrtNumWorkers,\n        xCenter: xMin + ((0.5 + i) * view.xRange) / sqrtNumWorkers,\n        yCenter: yMin + ((0.5 + j) * view.yRange) / sqrtNumWorkers,\n        maxIterations: view.maxIterations,\n      };\n      views.push(subView);\n    }\n  }\n\n  return views;\n}\n","/* Main entry point for the program. */\n\nimport { draw } from './draw';\nimport { View, reset, split, zoom } from './view';\n\nconst ZOOM_FACTOR = 2;\nconst NUM_WORKERS = 9;\nconst SQRT_NUM_WORKERS = Math.sqrt(NUM_WORKERS);\nconst MAX_ITERATIONS = 1000;\nconsole.assert(SQRT_NUM_WORKERS === Math.floor(SQRT_NUM_WORKERS));\n\nfunction main() {\n  /* Runs the Mandelbrot visualization. */\n\n  // Get the canvas.\n  const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n  // Ensure that the canvas dimensions are divisible by sqrt(numWorkers).\n  canvas.width -= canvas.width % SQRT_NUM_WORKERS;\n  canvas.height -= canvas.height % SQRT_NUM_WORKERS;\n\n  // Get the rendering context and set fill to black.\n  const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n  ctx.fillStyle = '#000000';\n\n  // Create workers for rendering subviews.\n  let views = new Array<View>(NUM_WORKERS);\n  const workers = new Array<Worker>();\n  for (let i = 0; i < NUM_WORKERS; i++) {\n    // Create a new 'Mandelbrot worker'.\n    const worker = new Worker('mandelbrot.ts');\n    worker.onmessage = (e: MessageEvent) => {\n      const times = e.data as Uint32Array;\n      draw(ctx, views[i], times, MAX_ITERATIONS);\n    };\n    workers.push(worker);\n  }\n\n  // Function to dispatch work to each worker.\n  const dispatch = (v: View) => {\n    views = split(v, NUM_WORKERS);\n    for (let i = 0; i < NUM_WORKERS; i++) {\n      workers[i].postMessage(views[i]);\n    }\n  };\n\n  // Initial\n  let view = reset(canvas.width, canvas.height, MAX_ITERATIONS);\n  dispatch(view);\n  const undoStack = new Array<View>();\n\n  // Key 'r' to reset.\n  window.addEventListener('keypress', (e: KeyboardEvent) => {\n    if (e.key === 'r') {\n      // Reset\n      view = reset(canvas.width, canvas.height, MAX_ITERATIONS);\n      while (undoStack.length) {\n        undoStack.pop();\n      }\n      dispatch(view);\n    } else if (e.key === 'b') {\n      // Undo\n      if (undoStack.length) {\n        view = undoStack.pop() as View;\n        dispatch(view);\n      }\n    }\n  });\n\n  // Left click to zoom in.\n  canvas.addEventListener('click', e => {\n    undoStack.push(Object.assign({}, view));\n    view = zoom(e, view, ZOOM_FACTOR);\n    dispatch(view);\n  });\n\n  // Right click to zoom out.\n  canvas.addEventListener('contextmenu', e => {\n    e.preventDefault();\n    undoStack.push(Object.assign({}, view));\n    view = zoom(e, view, 1 / ZOOM_FACTOR);\n    dispatch(view);\n  });\n}\n\nmain();\n"]}