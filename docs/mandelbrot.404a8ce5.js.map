{"version":3,"sources":["view.ts","mandelbrot.ts"],"names":[],"mappings":"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","file":"mandelbrot.404a8ce5.js","sourceRoot":"../src","sourcesContent":["/* Functions for manipulating the user's view. */\n\nexport interface View {\n  // Coordinate system.\n  xCenter: number;\n  yCenter: number;\n  xRange: number;\n  yRange: number;\n\n  // Pixels.\n  i: number;\n  j: number;\n  width: number;\n  height: number;\n\n  // Metadata for Mandelbrot.\n  maxIterations: number;\n}\n\nexport function zoom(event: MouseEvent, view: View, zoomFactor = 2): View {\n  /* Zooms the view given a user click. */\n\n  // Get the top left corner of the current view.\n  const xMin = view.xCenter - view.xRange / 2;\n  const yMin = view.yCenter - view.yRange / 2;\n\n  // Get the new view center.\n  view.xCenter = xMin + (view.xRange * event.layerX) / view.width;\n  view.yCenter = yMin + (view.yRange * event.layerY) / view.height;\n  console.log(`Centered on ${view.xCenter} + ${view.yCenter}i.`);\n\n  // Zoom.\n  view.xRange /= zoomFactor;\n  view.yRange /= zoomFactor;\n\n  return view;\n}\n\nexport function reset(\n  width: number,\n  height: number,\n  maxIterations: number\n): View {\n  /* Resets to the 'default' view of the Mandelbrot set. */\n\n  return {\n    xCenter: -0.75,\n    yCenter: 0,\n    xRange: 3.5,\n    yRange: 2,\n    i: 0,\n    j: 0,\n    width,\n    height,\n    maxIterations,\n  };\n}\n\nexport function split(view: View, numWorkers: number): View[] {\n  const sqrtNumWorkers = Math.sqrt(numWorkers);\n  console.assert(sqrtNumWorkers === Math.floor(sqrtNumWorkers));\n  console.assert(view.i === 0);\n  console.assert(view.j === 0);\n\n  const views = new Array<View>();\n  const xMin = view.xCenter - view.xRange / 2;\n  const yMin = view.yCenter - view.yRange / 2;\n  for (let i = 0; i < sqrtNumWorkers; i++) {\n    for (let j = 0; j < sqrtNumWorkers; j++) {\n      const subView = {\n        i: (i * view.width) / sqrtNumWorkers,\n        j: (j * view.height) / sqrtNumWorkers,\n        height: view.height / sqrtNumWorkers,\n        width: view.width / sqrtNumWorkers,\n\n        xRange: view.xRange / sqrtNumWorkers,\n        yRange: view.yRange / sqrtNumWorkers,\n        xCenter: xMin + ((0.5 + i) * view.xRange) / sqrtNumWorkers,\n        yCenter: yMin + ((0.5 + j) * view.yRange) / sqrtNumWorkers,\n        maxIterations: view.maxIterations,\n      };\n      views.push(subView);\n    }\n  }\n\n  return views;\n}\n","/* Functions for computing the Mandelbrot set. */\n\nimport { reset, View } from './view';\n\nexport function mandelbrot(view: View, escapeModulusSquared = 4): Uint32Array {\n  /* Naive escape time algorithm.*/\n\n  // Get image bounds in the coordinate system.\n  const xMin = view.xCenter - view.xRange / 2;\n  const yMin = view.yCenter - view.yRange / 2;\n\n  const escapeTimes = new Uint32Array(view.width * view.height);\n\n  // Compute escape time for each pixel.\n  for (let i = 0; i < view.width; i++) {\n    for (let j = 0; j < view.height; j++) {\n      let escapeTime = 0;\n      // Transform from pixels -> coordinate system.\n      const a = xMin + (view.xRange * i) / view.width;\n      const b = yMin + (view.yRange * j) / view.height;\n      let x = 0;\n      let y = 0;\n      for (let iter = 0; iter < view.maxIterations; iter++) {\n        /* z <- z^2 + c\n             = (x + yi)^2 + (a + bi)\n             = x^2 -y^2 + 2xyi + a + bi\n             = (x^2 -y^2 + a) + (2xy + b)i\n        */\n        const xSquared = x ** 2;\n        const ySquared = y ** 2;\n        const xTemp = xSquared - ySquared + a;\n        y = 2 * x * y + b;\n        x = xTemp;\n        if (xSquared + ySquared > escapeModulusSquared) {\n          break;\n        }\n        escapeTime++;\n      }\n\n      if (escapeTime < view.maxIterations) {\n        const nu = Math.log2(Math.log2(x ** 2 + y ** 2));\n        // escapeTime += nu - 4.0;\n      }\n\n      escapeTimes[i + view.width * j] = escapeTime;\n    }\n  }\n\n  return escapeTimes;\n}\n\nexport function benchmark(\n  width: number,\n  height: number,\n  maxIterations: number\n) {\n  const view = reset(width, height, maxIterations);\n  const start = Date.now();\n  mandelbrot(view);\n  const duration = (Date.now() - start) / 1000; /// In seconds.\n  console.log(\n    `Ran ${maxIterations} iterations at ${width}x${height} in ${duration} sec.`\n  );\n}\n\n// Worker function.\nonmessage = (e: MessageEvent) => {\n  const view = e.data as View;\n  const times = mandelbrot(view);\n  postMessage(times);\n};\n"]}